#!/usr/bin/env zsh
#
# Argument handling
#   (see `man getopt /^EXAMPLES`)
#

function print-usage-and-exit() {
  local original_invocation="$1"
  printf "Usage:\t${original_invocation} [flags]\n" >&2
  column --table --separator="@" <<EOF
@-i <int> | --max-image-length=<int>@Set the max image name length. Default is 30 characters.
@-q | --machine-output@Strip headers and leading columns s.t. only relevant data is shown.
@                     @This makes the output more easily awk'able.
@-h | --help@Print usage of this script.
EOF
  exit 0
}

getopt --test > /dev/null && true
if [ $? -ne 4 ]; then
  echo 'Error: `getopt --test` failed. You need the GNU `getopt`!' >&2
  exit 69
fi

LONGOPTS=max-image-length:,machine-output,help
OPTIONS=i:qh

original_invocation="$0"
parsed_args=$(getopt --options=${OPTIONS} --longoptions=${LONGOPTS} --name "$0" -- "$@") || exit 2
eval set -- "${parsed_args}"

max_image_length=30
machine_output="false"
while true; do
  case "$1" in
    -i|--max-image-length)
      max_image_length="$2"
      shift 2
      ;;
    -q|--machine-output)
      machine_output="true"
      shift
      ;;
    -h|--help)
      print-usage-and-exit "${original_invocation}"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "UNREACHABLE" >&2
      exit 1337
      ;;
  esac
done


#
# Actual content!
#
docker container ps --format "json" | (
  jq \
    --raw-output \
    --null-input \
    --argjson max_len "${max_image_length}" \
    --argjson machine_output "${machine_output}" \
    --from-file /dev/fd/3 \
    3<<"EOF"
# begin(EOF)
  [
    inputs
    | with_entries(
        if (.key == "Image") then .+{
          value:
            (if (.value | length > $max_len)
              then "...\(.value[-$max_len:])"
              else .value
            end)
        } else null end //
        if (.key == "Ports") then .+{
          # This ignores IPv4 vs IPv6-ness and TCP vs UDP.
          # It should be fine for an overview.
          value: .value
            | split(", ")
            | map(.
              | capture("(?<ip>.+):(?<host>[0-9]+)->(?<container>[0-9]+)")
              | "(.host):\(.container)"
            )
            | unique
            | join(",")
        } else null end //
        .
     )
  ]
  | sort_by(.CreatedAt, .ID)

  # Prepend index to the left in the `_index` field.
  | (1e-9) as $epsilon
  | ( ((. | length | log10) + $epsilon) | ceil ) as $num_digits_for_index
  | to_entries
  | map(.value + {
    _index: (
      ("    ") as $many_spaces
        | "\($many_spaces)\(.key + 1)"[-$num_digits_for_index:]
        | "[\(.)]"
      ),
  })

  # Output formatting
  | (. | length > 0) as $has_containers
  | if (($has_containers | not) and ($machine_output | not))
      then [{ID: "-"}]
      else .
    end
  | [
      (if $machine_output
        then empty
        else { # Pretty-printed column name mapping
          Command:      "COMMAND",
          CreatedAt:    "CREATED AT",
          ID:           "ID",
          Image:        "IMAGE",
          Labels:       "LABELS",
          LocalVolumes: "LOCAL VOLUMES",
          Mounts:       "MOUNTS",
          Names:        "NAMES",
          Networks:     "NETWORKS",
          Ports:        "PORTS",
          RunningFor:   "RUNNING FOR",
          Size:         "SIZE",
          State:        "STATE",
          Status:       "STATUS",
        }
      end),
      .[]
    ]
  | .[]
  | [
      (if ($has_containers and ($machine_output | not)) then (._index) else (empty) end),
      .ID,
      .Names,
      .Status,
      .Image,
      (empty)
    ]
  | @tsv
# end(EOF)
EOF
) | column -t -s $'\t'

